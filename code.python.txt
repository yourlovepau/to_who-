import tkinter as tk
from tkinter import messagebox
import datetime
import schedule
import time
import threading

class ChickenFeederApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Auto Smart Broiler Chicken Feeder")

        # GUI Components
        self.chicken_count_label = tk.Label(root, text="Enter the number of chickens:")
        self.chicken_count_label.pack()
        
        self.chicken_count_entry = tk.Entry(root)
        self.chicken_count_entry.pack()
        
        self.check_feed_button = tk.Button(root, text="Verify Feed Sufficiency", command=self.check_feed)
        self.check_feed_button.pack()
        
        self.status_label = tk.Label(root, text="", fg="blue")
        self.status_label.pack()
        
        # Schedule feed dispensing
        schedule.every().day.at("05:00").do(self.dispense_feed)
        schedule.every().day.at("18:00").do(self.dispense_feed)

        # Start scheduler in a separate thread
        threading.Thread(target=self.run_scheduler).start()

    def check_feed(self):
        self.chicken_count = int(self.chicken_count_entry.get())
        
        # Assuming feed sufficiency is determined randomly for simulation purposes
        self.is_feed_sufficient = self.check_feed_sufficiency()
        
        if self.is_feed_sufficient:
            self.status_label.config(text="Feed is sufficient.")
        else:
            self.status_label.config(text="Feed is not sufficient.")
        
    def check_feed_sufficiency(self):
        # Simulate some condition for sufficiency, e.g., random check
        import random
        return random.choice([True, False])

    def dispense_feed(self):
        if not self.is_feed_sufficient:
            messagebox.showinfo("Feed Status", "Cannot dispense feed. Feed is not sufficient.")
            return
        
        # Simulate feed dispensing
        dispense_time = datetime.datetime.now()
        messagebox.showinfo("Feed Dispensed", f"Feed dispensed at {dispense_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Track feed consumption (simulated)
        self.track_feed_consumption(dispense_time)

    def track_feed_consumption(self, dispense_time):
        consumption_status = "Feed is consumed." if self.check_consumption() else "Feed is not consumed."
        messagebox.showinfo("Consumption Status", consumption_status)

    def check_consumption(self):
        # Simulate consumption check
        import random
        return random.choice([True, False])

    def run_scheduler(self):
        while True:
            schedule.run_pending()
            time.sleep(1)

if __name__ == "__main__":
    root = tk.Tk()
    app = ChickenFeederApp(root)
    root.mainloop()
